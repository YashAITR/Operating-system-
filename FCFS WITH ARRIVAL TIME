#include<iostream>
#include<algorithm>
using namespace std;

struct Process {
    int id;
    int bt; // Burst Time
    int at; // Arrival Time
};

bool comparison(Process a, Process b) {
    return (a.at < b.at);
}

void findWaitingTime(Process proc[], int n, int wt[]) {
    wt[0] = 0;

    for (int i = 1; i < n; i++)
        wt[i] = proc[i - 1].bt + wt[i - 1];
}

void findTurnaroundTime(Process proc[], int n, int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findAvgTime(Process proc[], int n) {
    int wt[n], tat[n];

    findWaitingTime(proc, n, wt);

    findTurnaroundTime(proc, n, wt, tat);

    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

    cout << "Average waiting time = " << (float)total_wt / (float)n << endl;
    cout << "Average turnaround time = " << (float)total_tat / (float)n << endl;
}

int main() {
    Process proc[] = {{1, 6, 1}, {2, 8, 1}, {3, 7, 2}, {4, 3, 3}};
    int n = sizeof(proc) / sizeof(proc[0]);

    sort(proc, proc + n, comparison);

    findAvgTime(proc, n);

    return 0;
}
