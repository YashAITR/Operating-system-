#include<iostream>
#include<algorithm>
using namespace std;

struct Process {
    int id;
    int bt;
    int priority;
};

bool comparison(Process a, Process b) {
    return (a.priority > b.priority);
}

void findWaitingTime(int processes[], int n, int bt[], int wt[], int priority[]) {
    wt[0] = 0;

    for (int i = 1; i < n ; i++ )
        wt[i] = bt[i-1] + wt[i-1];
}

void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

void findPriority(int processes[], int n, int bt[], int priority[]) {
    int wt[n], tat[n];
    Process proc[n];

    for (int i = 0; i < n; i++) {
        proc[i].id = processes[i];
        proc[i].bt = bt[i];
        proc[i].priority = priority[i];
    }

    sort(proc, proc + n, comparison);

    findWaitingTime(processes, n, bt, wt, priority);
    findTurnAroundTime(processes, n, bt, wt, tat);

    cout << "Process\tBurst Time\tWaiting Time\tTurnaround Time\n";

    for (int i = 0; i < n; i++)
        cout << proc
